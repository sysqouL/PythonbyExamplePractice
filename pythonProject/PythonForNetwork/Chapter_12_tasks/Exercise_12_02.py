#-------------------------------------------------
"""
"""

"""
    Задание 12.2 
    В этом задании необходимо создать функцию convert_ranges_to_ip_list,
    которая конвертирует список IP-адресов в разных форматах в список,
    где каждый IP-адрес указан отдельно.
    Функция ожидает как аргумент список, в котором содержатся IP-адреса
    и/или диапазоны IP-адресов.
    Элементы списка могут быть в формате:
        * 10.1.1.1
        * 10.1.1.1-10.1.1.10
        * 10.1.1.1-10
    Если адрес указан в виде диапазона, надо развернуть диапазон в отдельные
    адреса, включая последний адрес диапазона.
    Для упрощения задачи, можно считать, что в диапазоне всегда меняется только
    последний октет адреса.
    Функция возвращает список IP-адресов.
    Например, если передать функции convert_ranges_to_ip_list такой список:
        ['8.8.4.4', '1.1.1.1-3', '172.21.41.128-172.21.41.132']
    Функция должна вернуть такой список:
        ['8.8.4.4', '1.1.1.1', '1.1.1.2', '1.1.1.3', '172.21.41.128',
        '172.21.41.129', '172.21.41.130', '172.21.41.131', '172.21.41.132']

"""
import ipaddress
from pprint import pprint

ip_list_example = ['8.8.4.4', '1.1.1.1-3','172.21.41.128-172.21.41.132']

def convert_ranges_to_ip_list(ip_addresses):
    ip_list = []
    for ip_address in ip_addresses:
        if "-" in ip_address:
            # разбиваем на диапазоны ip адреса
            start_ip, stop_ip = ip_address.split('-')
            if "." not in stop_ip:
                # в случае с 1.1.1.1-3 что бы вернуть ip 1.1.1.3
                stop_ip = ".".join(start_ip.split(".")[:-1] + [stop_ip])
            # создаем объекты типа IPv4Address
            start_ip = ipaddress.ip_address(start_ip)
            stop_ip = ipaddress.ip_address(stop_ip)
            # проходимся по диапазонам которые нужно раскрыть
            for ip in range(int(start_ip), int(stop_ip) + 1):
                ip_list.append(str(ipaddress.ip_address(ip)))
        else:
            ip_list.append(str(ip_address))
    return ip_list

if __name__ == "__main__":
    pprint(convert_ranges_to_ip_list(ip_list_example))