#-------------------------------------------------
"""
    Список полезных функции
"""


"""
    print(*items, sep='', end='\n', file=sys.stdout, flush=False)
    sep - контролирует какой разделитель будет использоваться между элементами. По умолчанию исп пробел
    Можно изменить на любую другую строку:  sep='|', sep='\n', sep=f"\n{'-' * 10}\n" 
    
    end - контролирует какое значение выведется после вывода всех элементов. По умолчанию исп перевод строки
    Можно изменить на любую другую строку:  end='\n'+'-'*10
    
    file - контролирует то, куда выводится значение функции print. По умолчанию выводится в 
    стандартный поток sys.stdout
    Передается любой аргумент с методом write - за счет этого можно записывать строки в файл
    
    flush - отключение/включение буферизации
    
    -------------------------------------------------------------------------------------------------------------------    
    Функция range - range(start, stop, step)
    
    -------------------------------------------------------------------------------------------------------------------
    Функция sorted - возвращает новый отсортированный список, полученный из переданного аргумента(объекта)
    Всегда возвращает список. При сортировке словаря - сортирует и возвращает список ключей.
    
    reverse - управляет порядком сортировки
    
    key - параметр, указывающий как выполнять сортировку - ожидает функцию: sorted(list, key=len/str.lower и тп)
    Можно сортировать объекты по любому другому, с использованием функции lambda или спец функции модуля operator
    
    Чтобы отсортировать список кортежей из 2х элементов по второму элементу:
    from operator import itemgetter
    tuple = [{эл-ты, числа}]
    sorted(tuple, key=itemgetter(1))
    
    ----------------------------------------------------------------------------------------------------------
    Функция преобразования IP в двоичный формат:
    def bin_ip(ip):
        octets = [int(o) for o in ip.split(".")]
        return("{:08b}"*4).format(*octets)
    
    ----------------------------------------------------------------------------------------------------------
    enumerate = итератор для получения порядкового номера в цикле:
    for position, string in enumerate(list, нач значение)
        print(position, string)
    
    ----------------------------------------------------------------------------------------------------------
    Функция zip - на вход передаются последовательности, zip возвращет итератор с кортежами в данном виде:
        a = [1,2,3]
        b = [100,200,300]
        print(list(zip(a,b))) - [(1,100), (2,200), (3,300)]
    Использование с последовательностями разной длинны - все будут отрезаны по самой короткой
    Можно использовать для создания словарей(в том числе вложенных через цикл и .keys
    
    ----------------------------------------------------------------------------------------------------------
    Анонимная функция(лямбда):
        * содержит только одно выражение;
        * могут передавать сколько угодно аргументов;
        sum_arg = lambda a,b: a+b
    Отсутствует оператор return
    
    ----------------------------------------------------------------------------------------------------------
    Функция map - применяет функцию к каждому эл-ту последовательности и возвращает итератор с результатами:
        listtest = ['эл-ты']
        new_list = list(map(str.upper, listtest)))
        
    List comprehension вместо map:
        list = ['элементы с маленькой буквы']
        new_list = [word.upper() for word in list]
        new_list2 = [f"элемент{x}" for x in list]
        
    ----------------------------------------------------------------------------------------------------------
    Функция filter - применяется ко всем элементам последовательности и возвращает итератор с теми объектами,
    для которых функция вернула True
    
    list_strings = ['one', 'two', '3', '4']
    list_filter = list(filter(str.isdigit, list_strings))
    
    List comprehension вместо filter
        [s for s in list_strings if s.isdigit()]
"""
